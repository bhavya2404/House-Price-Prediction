# -*- coding: utf-8 -*-
"""HOUSE PRICE PREDICTION.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tifSzqKvasBXE1DB9CB2r3XjFJ7yfF-p

IMPORT ALL REQUIRED LIBRARIES
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestRegressor

"""IMPORT DATA SET"""

data=pd.read_csv('Train.csv')

data.shape

data.info()

data.head()

data.describe()

data.isnull().any()

data.dropna()

data.duplicated()

data.drop_duplicates()

data.dropna(inplace=True)

data = data[(data['SQUARE_FT'] <= 8000) & (data['TARGET(PRICE_IN_LACS)'] <= 20000000)]

data = pd.get_dummies(data, columns=['ADDRESS'])

data.shape

data.describe()

data.head()

data.info()

data_encoded = pd.get_dummies(data, columns=['POSTED_BY', 'BHK_OR_RK'])

label_encoder = LabelEncoder()
categorical_columns = ['POSTED_BY', 'BHK_OR_RK']  # Add more categorical columns if needed

for column in categorical_columns:
    data[column] = label_encoder.fit_transform(data[column])

"""DATA VISUALIZATION"""

plt.figure(figsize=(17, 10))

# Countplot for 'POSTED_BY'
plt.subplot(2, 3, 1)
sns.countplot(x='POSTED_BY', data=data)
plt.title('POSTED_BY Count')

# Countplot for 'UNDER_CONSTRUCTION'
plt.subplot(2, 3, 2)
sns.countplot(x='UNDER_CONSTRUCTION', data=data)
plt.title('UNDER_CONSTRUCTION Count')

# Countplot for 'RERA'
plt.subplot(2, 3, 3)
sns.countplot(x='RERA', data=data)
plt.title('RERA Count')

# Countplot for 'BHK_OR_RK'
plt.subplot(2, 3, 4)
sns.countplot(x='BHK_OR_RK', data=data)
plt.title('BHK_OR_RK Count')

plt.figure(figsize=(15, 5))

# Boxplot for 'SQUARE_FT'
plt.subplot(1, 3, 1)
sns.boxplot(y='SQUARE_FT', data=data)
plt.title('SQUARE_FT Distribution')

# Boxplot for 'TARGET(PRICE_IN_LACS)'
plt.subplot(1, 3, 2)
sns.boxplot(y='TARGET(PRICE_IN_LACS)', data=data)
plt.title('Price Distribution')

plt.subplot(1, 1, 1)
sns.histplot(data['BHK_NO.'], kde=True)
plt.title('BHK_NO. Distribution')

plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 8))
numeric_features = ['SQUARE_FT', 'TARGET(PRICE_IN_LACS)', 'BHK_NO.', 'LONGITUDE', 'LATITUDE']
correlation_matrix = data[numeric_features].corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Heatmap (Numeric Features)')
plt.show()

sns.pairplot(data[numeric_features])
plt.show()

plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)
sns.countplot(x='READY_TO_MOVE', data=data)
plt.title('READY_TO_MOVE Count')

plt.subplot(1, 2, 2)
sns.countplot(x='RESALE', data=data)
plt.title('RESALE Count')

plt.tight_layout()
plt.show()

plt.figure(figsize=(12, 6))
sns.scatterplot(x='SQUARE_FT', y='TARGET(PRICE_IN_LACS)', data=data)
plt.title('Total Square Feet vs. Price')
plt.show()



"""SPLIT  THE  INTO TRAINING AND TESTING SETS"""

# Split the dataset into features (X) and target (y)
X = data.drop(columns=['TARGET(PRICE_IN_LACS)'])  # Exclude the target variable
y = data['TARGET(PRICE_IN_LACS)']  # Target variable

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)



X_train.shape

y_train.shape

X_test.shape

y_test.shape

model = LinearRegression()
model.fit(X_train, y_train)

model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse}")
print(f"R-squared: {r2}")

plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, alpha=0.5)
plt.xlabel("Actual Prices (in lacs)")
plt.ylabel("Predicted Prices (in lacs)")
plt.title("Actual vs. Predicted House Prices")
plt.show()

plt.figure(figsize=(10, 6))
plt.hist(y_test - y_pred, bins=30)
plt.xlabel("Residuals (Actual - Predicted)")
plt.ylabel("Frequency")
plt.title("Residuals Distribution")
plt.show()

new_data = pd.DataFrame({
    'total_sqft': [1000],
    'bath': [2],
    'balcony': [2],
    'ADDRESS_ panvel,Mumbai': [0],
    'ADDRESS_ Manoramaganj,Indore': [0],
})

if set(new_data.columns) != set(X_train.columns):
    missing_columns = set(X_train.columns) - set(new_data.columns)
    for col in missing_columns:
        new_data[col] = 0

# Reorder the columns to match the order in X_train
new_data = new_data[X_train.columns]

# Make predictions for the new data
predicted_price = model.predict(new_data)

print(f"Predicted Price (in lacs): {predicted_price[0]/100000}")
# Make predictions for the new data
predicted_price = model.predict(new_data)


# Create and train the Random Forest Regression model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Make predictions for the new data
predicted_price = model.predict(new_data)

# Ensure the predicted price is within the desired range (10-60 lakhs)
predicted_price = max(min(predicted_price[0], 6000), 10)

# Format the predicted price as "X lakhs"
formatted_predicted_price = f"{predicted_price:.2f} lakhs"

print(f"Predicted Price: {formatted_predicted_price}")